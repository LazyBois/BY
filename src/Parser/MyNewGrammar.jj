/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";

  static = true;
}

PARSER_BEGIN(EG2)
package Parser;

import java.text.SimpleDateFormat;
import java.util.*;
import java.io.*;
import sd.*;
import util.*;



public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTEG2State jjtree = new JJTEG2State();

/*@egen*/
  public static int row = 0;
   public static FHTable fh = null;

  public static PrintStream fs = null;

  public static QTTable qtTable = null;

  public static SimpleNode n = null;

  public static String ErrorOutputName = "ErrorLog.txt";

  public static void main(String args [])
  {
  
	sd window = new sd();
	window.frame.setVisible(true);
	
    qtTable = new QTTable();
     fh = new FHTable();
     
    String fileTOutputName = "testToken.txt"; //\u8bcd\u6cd5
    String fileGOutputName = "testGrammar.txt"; //\u8bed\u6cd5
    String fileInputName = "";
    System.out.print("Enter filePath:");
    Scanner in = new Scanner(System.in);
    //    fileInputName = in.next();
    fileInputName = "test.txt";
    FileInputStream fis = null;
    try
    {
	 PrintStream randomFile = new PrintStream(ErrorOutputName);
    randomFile.println("\u9519\u8bef");
    randomFile.flush();
    randomFile.close();
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    appendMethodA(ErrorOutputName, df.format(new Date()));

      
      fis = new FileInputStream(fileInputName);
      new EG2(fis);
      n = EG2.Start();
      fs = new PrintStream(fileGOutputName);
      dump("", n);
      fis = new FileInputStream(fileInputName);
      SimpleCharStream.inputStream = null;
      SimpleCharStream SCS = new SimpleCharStream(fis, null, 1, 1);
      EG2TokenManager.ReInit(SCS);
      fs = new PrintStream(fileTOutputName);
      getToken();
      fis.close();
      qtTable.printQTTable();
      System.out.println("Thank you.");
    	appendMethodA(ErrorOutputName, "Over!");
    }
    catch (Exception e)
    {
      System.out.println("\u7a0b\u5e8f\u51fa\u9519\uff01\u8bf7\u67e5\u770b\u9519\u8bef\u65e5\u5fd7\uff01");
      appendMethodA(ErrorOutputName, e.getMessage());
    }
  }

public static void appendMethodA(String fileName, String content)
  {
    try
    {
      // \u6253\u5f00\u4e00\u4e2a\u968f\u673a\u8bbf\u95ee\u6587\u4ef6\u6d41\uff0c\u6309\u8bfb\u5199\u65b9\u5f0f  
      RandomAccessFile randomFile = new RandomAccessFile(fileName, "rw");
      // \u6587\u4ef6\u957f\u5ea6\uff0c\u5b57\u8282\u6570  
      long fileLength = randomFile.length();
      //\u5c06\u5199\u6587\u4ef6\u6307\u9488\u79fb\u5230\u6587\u4ef6\u5c3e\u3002  
      randomFile.seek(fileLength);
      randomFile.writeBytes("\n");
      randomFile.writeBytes(content);
      randomFile.close();
    }
    catch (IOException e)
    {
      e.printStackTrace();
    }
  }
  
  public static void getToken()
  {
    Token t = EG2TokenManager.getNextToken();
    while (!t.image.equals(""))
    {
      fs.println("(" + "\u201c" + t.image + "\u201d" + "," + t.kind + ")");
      t = EG2TokenManager.getNextToken();
    }
    fs.flush();
    fs.close();
  }

  public static void dump(String prefix, SimpleNode n)
  {
    //System.out.println(toString(prefix));
    fs.println(prefix + EG2TreeConstants.jjtNodeName [n.id]);
    if (n.children != null)
    {
      for (int i = 0; i < n.children.length; ++i)
      {
        SimpleNode n1 = (SimpleNode) n.children [i];
        if (n1 != null)
        {
          dump(prefix + " ", n1);
        }
        else
        {
          fs.flush();
          fs.close();
        }
      }
    }
  }
}

PARSER_END(EG2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

//\u6807\u8bc6\u7b26
TOKEN :
{
  < Main : "main" >
| < IF : "if" >
| < ELSE : "else" >
| < FOR : "for" >
| < DO : "do" >
| < WHILE : "while" >
| < SWITCH : "switch" >
| < CASE : "case" >
| < DEFAUL : "default" >
| < BREAK : "break" >
| < RETURN : "return" >
| < CONTINUE : "continue" >
}

/*\u8fd0\u7b97\u7b26*/
TOKEN :
{
  < add : "+" >
| < sub : "-" >
| < mul : "*" >
| < div : "/" >
| < sig : "%" >
| < doubleadd : "++" >
| < doublesub : "--" >
| < exclamation : "!" >
| < and : "&" >
| < or : "|" >
| < andand : "&&" >
| < oror : "||" >
}

/*\u8d4b\u503c*/
TOKEN :
{
  < assign : "=" >
}

/*\u5173\u7cfb\u7b26*/
TOKEN :
{
  < equal : "==" >
| < noEqual : "!=" >
| < less : "<" >
| < over : ">" >
| < overEqual : ">=" >
| < lessEqual : "<=" >
}

/*\u8fb9\u754c\u7b26*/
TOKEN :
{
  < quotation : "'" >
| < LC : "(" >
| < RC : ")" >
| < LT : "[" >
| < RT : "]" >
| < Lbrace : "{" >
| < Rbrace : "}" >
}

/*\u57fa\u672c\u53d8\u91cf\u7c7b\u578b*/
TOKEN :
{
  < VOID : "void" >
| < Int : "int" >
| < Double : "double" >
| < Float : "float" >
| < SHORT : "short" >
| < LONG : "long" >
| < Char : "char" >
| < Bool : "bool" >
}

/*\u5206\u9694\u7b26*/
TOKEN :
{
  < comma : "," >
| < semicolon : ";" >
| < colon : ":" >
}

TOKEN : //<\u5e38\u91cf>
{
  < CHARCONSTANT : "\'" (~[ ])? "\'" >
| < STRINGCONSTANT : "\"" (~[ ])* "\"" >
  //| < INTCONSTANT :
  //    (
  //      "0"
  //    | "0x"
  //    | "0X"
  //    )?
  //    (< DIGIT >)+
  //    (
  //      "l"
  //    | "L"
  //    )? >
| < FLOATCONSTANT :
    (
      (
        (< DIGIT >)+ "." (< DIGIT >)*
      )
    |
      (
        (< DIGIT >)* "." (< DIGIT >)+
      )
    )
    (
      "f"
    | "F"
    ) >
| < DOUBLECONSTANT :
    (
      (
        (< DIGIT >)+ "." (< DIGIT >)*
      )
    |
      (
        (< DIGIT >)* "." (< DIGIT >)+
      )
    ) >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  pragram()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pragram() : /* <\u7a0b\u5e8f\u3009\u2192 main()\u3008\u8bed\u53e5\u5757\u3009*/
{/*@bgen(jjtree) pragram */
  SimpleNode jjtn000 = new SimpleNode(JJTPRAGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pragram */
  try {
/*@egen*/
  (
    Funtion()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Funtion() :
{/*@bgen(jjtree) Funtion */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Funtion */
  try {
/*@egen*/
  type()
  (
    Identifier()
  | < Main >
  )
  < LC >
  (
    type() Identifier()
    (
      < assign > Integer()
    )?
    (
      < comma > type() Identifier()
      (
        < assign > Integer()
      )?
    )*
  )*
  < RC > < Lbrace >
  (
    Block()
  )*
  < Rbrace >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Block() :
{/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  State()
| < Lbrace >
  (
    Block()
  )*
  < Rbrace >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void State() : /*\u3008\u8bed\u53e5\u3009\u2192< \u58f0\u660e\u8bed\u53e5>|\u3008\u8d4b\u503c\u8bed\u53e5\u3009|\u3008\u6761\u4ef6\u8bed\u53e5\u3009|\u3008\u5faa\u73af\u8bed\u53e5if dowhile while\u3009|switchcase|return\u8bed\u53e5*/
{/*@bgen(jjtree) State */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) State */
  try {
/*@egen*/
  seqStatement()
| loopStatement()
| selStatement()
| jumpS()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void seqStatement() :
{/*@bgen(jjtree) seqStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) seqStatement */
  try {
/*@egen*/
  (
    assiState()
  | declState()
  )?
  < semicolon >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void assiState() : /*\u3008\u8d4b\u503c\u8bed\u53e5\u3009\u2192 ID =\u3008\u8868\u8fbe\u5f0f\u3009\uff1b*/
{/*@bgen(jjtree) assiState */
  SimpleNode jjtn000 = new SimpleNode(JJTASSISTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str1;
  String str2;
  Token t = null;
}
{/*@bgen(jjtree) assiState */
  try {
/*@egen*/
  str1 = Express()
  (
    t = < assign > str2 = Express()
    {
      qtTable.addQTInfo(new QTInfo(t.image, str2, "_", str1));
    }
    (
      < comma > str1 = Express() t = < assign > str2 = Express()
      {
        qtTable.addQTInfo(new QTInfo(t.image, str2, "_", str1));
      }
    )*
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declState() : /*\u3008\u58f0\u660e\u8bed\u53e5\u3009\u2192\u3008type\u3009 ID (=\u3008\u8868\u8fbe\u5f0f \u3009)?*/
{/*@bgen(jjtree) declState */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str1;
  String str2;
  String ty;
  Token t = null;
}
{/*@bgen(jjtree) declState */
  try {
/*@egen*/
  ty = type() {fh.add("notID", ty);}
  str1 = Identifier()
    {
    if (fh.has(str1))
    {
      String error = "Identifier " + str1 + " had been declared!";
      appendMethodA(ErrorOutputName, error);
      fh.remove("notID");
    }
    else
    {
      fh.set("notID", str1);
    }
  }
  (    
    t = < assign > str2 = Express()
    {
      qtTable.addQTInfo(new QTInfo(t.image, str2, "_", str1));
    }
  )?
  (
    < comma >
    {fh.add("notID", ty);}
     str1 = Identifier()
     {
    if (fh.has(str1))
    {
      String error = "Identifier " + str1 + " had been declared!";
      appendMethodA(ErrorOutputName, error);
      fh.remove("notID");
    }
    else
    {
      fh.set("notID", str1);
    }
  	}
    (
      t = < assign > str2 = Express()
      {
        qtTable.addQTInfo(new QTInfo(t.image, str2, "_", str1));
      }
    )?
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u9009\u62e9\u8bed\u53e5
void selStatement() :
{/*@bgen(jjtree) selStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) selStatement */
  try {
/*@egen*/
  IFState()
| Switchh()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Switchh() :
{/*@bgen(jjtree) Switchh */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv = new ConditionValue();
  Token tID = null;
  Token tcase = null;
  QTInfo qtT = null;
  QTInfo qtF = null;
  int nxq = 0;
}
{/*@bgen(jjtree) Switchh */
  try {
/*@egen*/
  < SWITCH > < LC > tID = < IDENTIFIER > < RC > < Lbrace >
  (
    < CASE >
    (
      tcase = < CHARCONSTANT >
    | tcase = < INTEGER_LITERAL >
    )
    < colon >
    {
      nxq = QTInfo.innerIdSeqen + 1;
      qtT = new QTInfo("case", tID.image, tcase.image, nxq + 2);
      qtTable.addQTInfo(qtT);
      qtF = new QTInfo("j", "_", "_", 0);
      cv.mergeFalse(qtF);
      qtTable.addQTInfo(qtF);
    }
    (
      State()
    )*
    {
      QTInfo qtJ = new QTInfo("jbr", "_", "_", 0);
      cv.mergeTrue(qtJ);
      qtTable.addQTInfo(qtJ);
      cv.backpatchFalseChain(QTInfo.innerIdSeqen + 1);
    }
  )+
  (
    < DEFAUL > < colon >
    (
      State()
    )*
  )?
  < Rbrace >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    cv.backpatchTrueChain(QTInfo.innerIdSeqen + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IFState() : /*\u3008\u6761\u4ef6\u8bed\u53e5\u3009\u2192 if\u3008\u6761\u4ef6\u3009(\u3008\u8bed\u53e5\u5757\u3009||\u3008\u8bed\u53e5\u3009)||else if (\u3008\u8bed\u53e5\u5757\u3009||\u3008\u8bed\u53e5\u3009)|| else(\u3008\u8bed\u53e5\u5757\u3009||\u3008\u8bed\u53e5\u3009)*/
{/*@bgen(jjtree) IFState */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int nxq = 0;
  ConditionValue cv = null;
  QTInfo qt = null;
}
{/*@bgen(jjtree) IFState */
  try {
/*@egen*/
  < IF > < LC > cv = BoolExpress() < RC >
  {
    nxq = QTInfo.innerIdSeqen + 1;
    cv.backpatchTrueChain(nxq);
  }
  Block()
  {
    qt = new QTInfo("j", "_", "_", 0);
    cv.mergeTrue(qt);
    qtTable.addQTInfo(qt);
    nxq = QTInfo.innerIdSeqen + 1;
    cv.backpatchFalseChain(nxq);
  }
  (
    LOOKAHEAD(1)
    < ELSE > Block()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    nxq = QTInfo.innerIdSeqen + 1;
    cv.backpatchTrueChain(nxq);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue BoolExpress() :
{/*@bgen(jjtree) BoolExpress */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEXPRESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv = null;
}
{/*@bgen(jjtree) BoolExpress */
  try {
/*@egen*/
  cv = orFunc()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u6216\u51fd\u6570
ConditionValue orFunc() :
{/*@bgen(jjtree) orFunc */
  SimpleNode jjtn000 = new SimpleNode(JJTORFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int nxq = 0;
  ConditionValue cv1 = null;
  ConditionValue cv2 = null;
}
{/*@bgen(jjtree) orFunc */
  try {
/*@egen*/
  cv1 = andFunc()
  (
    < oror >
    {
      nxq = QTInfo.innerIdSeqen + 1;
      cv1.backpatchFalseChain(nxq);
    }
    cv2 = andFunc()
    {
      cv1.addAll(cv2);
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv1;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u4e14\u51fd\u6570
ConditionValue andFunc() :
{/*@bgen(jjtree) andFunc */
  SimpleNode jjtn000 = new SimpleNode(JJTANDFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int nxq = 0;
  ConditionValue cv1 = null;
  ConditionValue cv2 = null;
}
{/*@bgen(jjtree) andFunc */
  try {
/*@egen*/
  cv1 = notFunc()
  (
    < andand >
    {
      nxq = QTInfo.innerIdSeqen + 1;
      cv1.backpatchTrueChain(nxq);
    }
    cv2 = notFunc()
    {
      cv1.addAll(cv2);
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv1;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue notFunc() :
{/*@bgen(jjtree) notFunc */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv = null;
  QTInfo qtTrue = null;
}
{/*@bgen(jjtree) notFunc */
  try {
/*@egen*/
  (
    cv = Boolean()
  | < exclamation > cv = Boolean()
  {
    cv.change();
  }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue Boolean() :
{/*@bgen(jjtree) Boolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int nxq = 0;
  String str1 = "";
  String str2 = "";
  String s = "";
  ConditionValue cv = new ConditionValue();
  QTInfo qtTrue = null;
}
{/*@bgen(jjtree) Boolean */
  try {
/*@egen*/
  str1 = Express()
  (
    s = Relation() str2 = Express()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    nxq = QTInfo.innerIdSeqen + 1;
    if (s.equals("")) qtTrue = new QTInfo("jnz", str1, "_", 0);
    else qtTrue = new QTInfo("j" + s, str1, str2, 0);
    QTInfo qtFalse = new QTInfo("j", "_", "_", 0);
    qtTable.addQTInfo(qtTrue);
    qtTable.addQTInfo(qtFalse);
    cv.mergeTrue(qtTrue);
    cv.mergeFalse(qtFalse);
    return cv;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u5faa\u73af\u8bed\u53e5
void loopStatement() :
{/*@bgen(jjtree) loopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) loopStatement */
  try {
/*@egen*/
  loopState()
| doLoop()
| forLoop()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void forLoop() :
{/*@bgen(jjtree) forLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTFORLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int start = 0;
  int end = 0;
  int nxq = 0;
  int n = 0;
  int nxq2 = 0;
  ConditionValue cv = null;
  ArrayList < QTInfo > array3 = new ArrayList < QTInfo > ();
}
{/*@bgen(jjtree) forLoop */
  try {
/*@egen*/
  < FOR > < LC >
  (
    assiState()
  )?
  < semicolon >
  {
    nxq2 = QTInfo.innerIdSeqen + 1;
  }
  (
    cv = BoolExpress()
  )?
  < semicolon >
  {
    start = QTInfo.innerIdSeqen + 1;
  }
  (
    LOOKAHEAD(2)
    assiState()
  | Express()
  )?
  < RC >
  {
    {
      end = QTInfo.innerIdSeqen + 1;
    }
    if (cv != null) cv.backpatchTrueChain(start);
  }
  Block()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    n = end - start;
    while ((n--) > 0)
    {
      array3.add(qtTable.QTList.get(start - 1));
      qtTable.QTList.remove(start - 1);
    }
    for (int i = start - 1; i < qtTable.QTList.size(); i++)
    {
      qtTable.get(i).setInnerId(i + 1);
    }
    for (int i = 0; i < array3.size(); i++)
    {
      array3.get(i).setInnerId(qtTable.QTList.size() + i + 1);
    }
    qtTable.QTList.addAll(array3);
    qtTable.addQTInfo(new QTInfo("j", "_", "_", nxq2));
    if (cv != null) cv.backpatchFalseChain(QTInfo.innerIdSeqen + 1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void doLoop() :
{/*@bgen(jjtree) doLoop */
  SimpleNode jjtn000 = new SimpleNode(JJTDOLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int nxq = QTInfo.innerIdSeqen+ 1;
  int row = 0;
  ConditionValue cv = null;
}
{/*@bgen(jjtree) doLoop */
  try {
/*@egen*/
  < DO > Block() < WHILE > < LC > cv = BoolExpress() < RC > < semicolon >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    cv.backpatchTrueChain(nxq);
    row = QTInfo.innerIdSeqen + 1;
    cv.backpatchFalseChain(row);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void loopState() : /*\u3008\u5faa\u73af\u8bed\u53e5\u3009\u2192 while\u3008\u6761\u4ef6\u3009\u3008\u8bed\u53e5\u5757\u3009*/
{/*@bgen(jjtree) loopState */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv = null;
  int nxq = 0;
  int start = 0;
}
{/*@bgen(jjtree) loopState */
  try {
/*@egen*/
  < WHILE > < LC >
  {
    start = QTInfo.innerIdSeqen + 1;
  }
  cv = BoolExpress() < RC >
  {
    nxq = QTInfo.innerIdSeqen + 1;
    cv.backpatchTrueChain(nxq);
  }
  Block()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    qtTable.addQTInfo(new QTInfo("j", "_", "_", start));
    nxq = QTInfo.innerIdSeqen + 1;
    cv.backpatchFalseChain(nxq);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u8868\u8fbe\u5f0f
String Express() :
{/*@bgen(jjtree) Express */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = "";
}
{/*@bgen(jjtree) Express */
  try {
/*@egen*/
  str = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u52a0\u51fd\u6570
String AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  String str1 = "";
  String str2 = "";
  String newTemp = "";
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  str1 = MultiplicativeExpression()
  {
    newTemp = str1;
  }
  (
    (
      t = < add >
    | t = < sub >
    | t = < and >
    | t = < or >
    )
    str2 = MultiplicativeExpression()
    {
      newTemp = VariableNameGenerator.genVariableName();
      qtTable.addQTInfo(new QTInfo(t.image, str1, str2, newTemp));
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u4e58\u51fd\u6570
String MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  String str1 = "";
  String str2 = "";
  String newTemp = "";
  String op = "";
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  str1 = UnaryExpression()
  {
    newTemp = str1;
  }
  (
    < doubleadd >
    {
      op = "+";
    }
  | < doublesub >
    {
      op = "-";
    }
  )?
  {
    if (!op.equals(""))
    {
      newTemp = VariableNameGenerator.genVariableName();
      qtTable.addQTInfo(new QTInfo("=", str1, "_", newTemp));
      qtTable.addQTInfo(new QTInfo(op, str1, "1", str1));
      str1 = newTemp;
    }
  }
  (
    (
      t = < mul >
    | t = < div >
    | t = < sig >
    )
    str2 = UnaryExpression()
    (
      < doubleadd >
      {
        op = "+";
      }
    | < doublesub >
      {
        op = "-";
      }
    )?
    {
      if (!op.equals(""))
      {
        newTemp = VariableNameGenerator.genVariableName();
        qtTable.addQTInfo(new QTInfo("=", str2, "_", newTemp));
        qtTable.addQTInfo(new QTInfo(op, str2, "1", str2));
        str2 = newTemp;
      }
    }
    {
      newTemp = VariableNameGenerator.genVariableName();
      qtTable.addQTInfo(new QTInfo(t.image, str1, str2, newTemp));
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return newTemp;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u64cd\u4f5c\u7b26
String UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = "";
  
  String str1 = "";
  boolean isID = true;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  (
    LOOKAHEAD(2)
    str = callFunc() //ID()
    //  | (LOOKAHEAD(2) str = afterChang()|str = Identifier())
  | str = Identifier() 
  | str = selfChang() isID = ISID()
  | str = Integer() isID = ISID()
  |
    (
      < LC > str = Express() < RC >
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    	if(!PanDuan(str) && isID && !fh.has(str))
  		  {
 			String error = "Identifier " + str + " havn't been declared!";
   		    appendMethodA(ErrorOutputName, error);
  		  }
    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u5224\u65ad\u662f\u4e0d\u662f\u6570\u7ec4
boolean PanDuan(String s):
{/*@bgen(jjtree) PanDuan */
  SimpleNode jjtn000 = new SimpleNode(JJTPANDUAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int i = s.length()-1;
}
{/*@bgen(jjtree) PanDuan */
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(s.charAt(i)==']' || s.charAt(0)== 'T')
    return true;
    else
    return false;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
boolean ISID():
{/*@bgen(jjtree) ISID */
  SimpleNode jjtn000 = new SimpleNode(JJTISID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ISID */
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return false;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u6570\u7ec4
String array() :
{/*@bgen(jjtree) array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  String length = "";
  String str = "";
}
{/*@bgen(jjtree) array */
  try {
/*@egen*/
  t = < IDENTIFIER >
  {
    str = t.image;
  }
  (
    < LT > length = Express() < RT >
    {
      str += "[" + length + "]";
    }
  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u524d++\u548c--
String selfChang() :
{/*@bgen(jjtree) selfChang */
  SimpleNode jjtn000 = new SimpleNode(JJTSELFCHANG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = "";
  String s = "";
}
{/*@bgen(jjtree) selfChang */
  try {
/*@egen*/
  //\u524d\u81ea\u589e
  (
    (
      < doubleadd >
      {
        s = "+";
      }
    | < doublesub >
      {
        s = "-";
      }
    )
    str = Identifier()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      if(!fh.has(str))
  		  {
 			String error = "Identifier " + str + " havn't been declared!";
   		    appendMethodA(ErrorOutputName, error);
  		  }
      qtTable.addQTInfo(new QTInfo(s, str, "1", str));
      return str;
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u540e++\u548c--
String afterChang() :
{/*@bgen(jjtree) afterChang */
  SimpleNode jjtn000 = new SimpleNode(JJTAFTERCHANG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = "";
  String s = "";
  String temp = "";
}
{/*@bgen(jjtree) afterChang */
  try {
/*@egen*/
  //\u540e\u81ea\u589e
  str = Identifier()
  (
    (
      < doubleadd >
      {
        s = "+";
      }
    | < doublesub >
      {
        s = "-";
      }
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      temp = VariableNameGenerator.genVariableName();
      qtTable.addQTInfo(new QTInfo("=", str, "_", temp));
      qtTable.addQTInfo(new QTInfo(s, str, "1", str));
      return temp;
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String callFunc() : //\u6ca1\u7ffb\u8bd1\u56db\u5143\u5f0f
{/*@bgen(jjtree) callFunc */
  SimpleNode jjtn000 = new SimpleNode(JJTCALLFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String str = "";
  String str1 = "";
  String s = "";
  QTInfo qtCall = null;
  Token t = null;
}
{/*@bgen(jjtree) callFunc */
  try {
/*@egen*/
  t = < IDENTIFIER > < LC >
  {
    s = t.image;
  }
  (
    str1 = Express() (< comma >)?
    {
      qtTable.addQTInfo(new QTInfo("para", str1, "_", "_"));
    }
  )*
  < RC >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    s = VariableNameGenerator.genVariableName();
    qtTable.addQTInfo(new QTInfo("call", str, "_", s));
    return s;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Relation() : /*\u3008\u5173\u7cfb\u7b26\u3009\u2192\uff1c|\uff1c\uff1d|\uff1e|\uff1e\uff1d|\uff1d\uff1d|!= */
{/*@bgen(jjtree) Relation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Relation */
  try {
/*@egen*/
  (
    t = < less >
  | t = < lessEqual >
  | t = < over >
  | t = < overEqual >
  | t = < equal >
  | t = < noEqual >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String type() :
{/*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) type */
  try {
/*@egen*/
  (
    t = < VOID >
  | t = < Int >
  | t = < Double >
  | t = < Float >
  | t = < Char >
  | t = < Bool >
  | t = < SHORT >
  | t = < LONG >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u6807\u8bc6\u7b26\u51fd\u6570
//\u6b64\u51fd\u6570\u5305\u62ec\u6807\u8bc6\u7b26\u540e\u6dfb\u52a0\u7684\u5404\u79cd\u5b57\u7b26
String Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  String str = "";
  String length = "";
  String length1 = "";
  String length2 = "";
  int count = 0;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  //  LOOKAHEAD(2)
  t = < IDENTIFIER >
  {
    str = t.image;
    
  }
  (
    < LT > length = Express() < RT >
    {
      //\u6570\u7ec4\u58f0\u660e
      if (fh.has("notID"))
      {
        array a = new array(length);
        fh.get("notID").add(a);
      }
      //\u6570\u7ec4\u4f7f\u7528
      else
      {
        if(!fh.has(str))
  		  {
 			String error = "Identifier " + str + " havn't been declared!";
   		    appendMethodA(ErrorOutputName, error);
  		  }
  		else
  		{
  		    
     	   if (count == 0)
     	   {
     	     length1 = length;
     	   }
     	   else if (count == 1)
       	 {
       	   length2 = length;
      	  }
       	 ++count;
      	}
      }
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (count == 1)
    {
      String T = VariableNameGenerator.genVariableName();
      int len = fh.get(t.image).v.get(0).length;
      qtTable.addQTInfo(new QTInfo("+", length1,"0", T));
      str = T;
    }
    else if (count == 2)
    {
      String T1 = VariableNameGenerator.genVariableName();
      String T2 = VariableNameGenerator.genVariableName();
      int len1 = fh.get(t.image).v.get(0).length;
      int len2 = fh.get(t.image).v.get(1).length;
      qtTable.addQTInfo(new QTInfo("*", length1, len1 + "", T1));
      qtTable.addQTInfo(new QTInfo("+", length2, T1, T1));
      qtTable.addQTInfo(new QTInfo("-", t.image, (len2 + 1) + "", T2));
      str = T2 + "[" + T1 + "]";
    }

    return str;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u9632\u6b62\u6570\u7ec4\u8fd4\u56deT[T]
String Identifier1() :
{/*@bgen(jjtree) Identifier1 */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Identifier1 */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u8df3\u8f6c\u8bed\u53e5
void jumpS() :
{/*@bgen(jjtree) jumpS */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) jumpS */
  try {
/*@egen*/
  ReturnS()
| BreakS()
| ContinueS()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u8fd4\u56de\u8bed\u53e5
void ReturnS() :
{/*@bgen(jjtree) ReturnS */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnS */
  try {
/*@egen*/
  < RETURN >
  (
    Express()
  )?
  < semicolon >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//break\u8bed\u53e5
void BreakS() :
{/*@bgen(jjtree) BreakS */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakS */
  try {
/*@egen*/
  < BREAK > < semicolon >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//continue\u8bed\u53e5
void ContinueS() :
{/*@bgen(jjtree) ContinueS */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueS */
  try {
/*@egen*/
  < CONTINUE > < semicolon >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u6570\u5b57\u51fd\u6570
//I:\eclipse_javacc\eclipse_javacc\java\BY\test.txt
String Integer() :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  (
    t = < INTEGER_LITERAL >
  | t = < FLOATCONSTANT >
  | t = < DOUBLECONSTANT >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}